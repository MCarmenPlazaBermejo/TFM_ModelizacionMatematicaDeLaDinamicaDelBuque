load "msh3"
load "gmsh"
//load "medit"
load "tetgen"
load "iovtk";
//Problema de Stokes: 3D perfil NACA de revolución

//En primer lugar mostramos en pantalla la malla que vamos a utilizar, en este caso
//se trata de un perfil NACA de revolución en 3 dimensiones
mesh3 Th = gmshload3("TFM_NACA_revDEF-v2.msh");
//mesh3 Th = tetg( Th1, switch="pqaaAAYYQ" ); // Usar tetgen para mejorar la malla
plot(Th);

// Definimos los índices de las fronteras para luego aplicar condiciones de contorno.
// Datos tomados del fichero .msh (primeras líneas):
// $PhysicalNames
// 8
// 2 1 "delante"
// 2 2 "detras"
// 2 3 "arriba"
// 2 4 "abajo"
// 2 5 "derecha"
// 2 6 "izquierda"
// 2 8 "NACAsurface"
// 3 7 "CajaConHueco"
// $EndPhysicalNames
int delante = 1, detras = 2, arriba=3, abajo = 4, derecha = 5, izquierda = 6;
int NACAsurface = 55555; //8;


//Elementos finitos Taylor-Hood
fespace Vh(Th,P2); //Espacio para velocidad
fespace Qh(Th,P1); //Espacio para presión

Vh u,v,w; // Incógnita: velocidad (u,v,w)
Qh p;    // Incógnita: presión
Vh ub,vb,wb; //Funciones test
Qh pb;     // Función test: presión
Vh u0,v0,w0; // Solución (campo de velocidades) en la etapa anterior

// Dato Inicial
u0 = 0;
v0 = 0;
w0 = 0;

// Re= L*V/nu  => nu=L*V/Re
real L=4; // Tamaño de la caja que rodea al perfil NACA
real V=0.1; // Velocidad caractrística de prueba
real Re = 1;
real nu=L*V/Re; // Viscosidad, único parámetro usado en las ecuaciones
func f=0;

macro grad(u) [dx(u),dy(u),dz(u)] //EOM
macro div(u,v,w) (dx(u)+dy(v)+dz(w)) //EOM
// Iteraciones en tiempo
real T0=0, T1=20; // Intervalo de tiempo [T0,T1]
int niter=20; // Número de iteraciones en tiempo
real dt=(T1-T0)/niter; // Paso de tiempo
int  iter; // Contador de iteraciones
real t; // Instante actual


// Formulación variacional en cada etapa de tiempo:
// vector de incógnitas y vector de funciones test
problem NavierStokes3D( [u,v,w,p], [ub,vb,wb,pb] )= //, solver=GMRES) =
  int3d(Th)( u*ub/dt ) // Derivada en tiempo
  + int3d(Th)( v*vb/dt ) // Derivada en tiempo
  + int3d(Th)( w*wb/dt ) // Derivada en tiempo

  // Stokes
  +int3d(Th)(nu*grad(u)'*grad(ub))
  +int3d(Th)( nu*grad(v)'*grad(vb))
  +int3d(Th)( nu*grad(w)'*grad(wb))
  -int3d(Th)( div(ub,vb,wb)*p)
  -int3d(Th)(div(u,v,w)*pb)
  -int3d(Th)(1.e-7*p*pb) //Penalización de p

  // Aproximación de la convección de u, usando (u0,v0,w0), así se linealiza
  + int3d(Th)( u0*dx(u)*ub + v0*dy(u)*ub + w0*dy(u)*ub )
  // Aproximación de la convección de v, usando (u0,v0,w0), así se linealiza
  + int3d(Th)( u0*dx(v)*vb + v0*dy(v)*vb + w0*dy(v)*vb )
  // Aproximación de la convección de w, usando (u0,v0,w0), así se linealiza
  + int3d(Th)( u0*dx(w)*wb + v0*dy(w)*wb + w0*dy(w)*wb )

  // Segundo miembro (formal lineal)
  - int3d(Th)( u0*ub/dt )// Derivada en tiempo
  - int3d(Th)( v0*vb/dt )// Derivada en tiempo
  - int3d(Th)( w0*wb/dt )// Derivada en tiempo

  // +on(abajo, derecha, izquierda, delante, detras, arriba, u=0,v=0,w=0)//C.contorno
  // +on(delante, u=1, v=1, w=1)
  // +on(fronteraNACA, u=0, v=0, w=0)
  +on(izquierda, u=1, v=0, w=0)
  // +on(arriba, abajo, delante, detras, u=0, v=0, w=0)
  +on(NACAsurface, u=0, v=0, w=0)
  ;

// Bucle en tiempo
for(iter=0; iter<niter; iter++)
{
  t = T0 + (iter+1)*dt;
  cout << "Iterac. " << iter << ", t=" << t << endl;

  //
  // Resolvemos el prolema en la etapa de tiempo actual
  //
  NavierStokes3D;

  //
  // Preparamos la siguiente iteración
  //
  u0=u;  v0=v;  w0=w;

  // Save to VTK (for high quality plotting)
  string filename = "navier-stokes-3d-naca-iter" + iter + ".vtk";
  savevtk(filename, Th, [u,v,w], p,
    dataname="Velocity Pressure");

}
